{"version":3,"sources":["logo.svg","MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainComponent","props","state","urlBox","str","URL","_","classes","this","Container","component","maxWidth","CssBaseline","className","paper","Typography","variant","TextField","margin","fullWidth","id","label","name","autoFocus","value","onChange","event","setState","target","Button","type","color","submit","onClick","document","location","href","disabled","validURL","Grid","container","item","xs","Link","React","Component","withStyles","theme","body","backgroundColor","palette","common","white","marginTop","spacing","display","flexDirection","alignItems","avatar","secondary","main","form","width","App","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,2NC4B3C,IAyBMC,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,OAAQ,YAHG,E,sEAMVC,GACL,GAAW,aAARA,EAAoB,OAAO,EAC9B,IAEI,OADA,IAAIC,IAAID,IACD,EACT,MAAOE,GACL,OAAO,K,+BAKL,IAAD,OACGC,EAAYC,KAAKP,MAAjBM,QACR,OACI,kBAACE,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACjC,kBAACC,EAAA,EAAD,MACA,yBAAKC,UAAWN,EAAQO,OAIpB,kBAACC,EAAA,EAAD,CAAYL,UAAU,KAAKM,QAAQ,MAAnC,6BAGA,kBAACC,EAAA,EAAD,CACID,QAAQ,WACRE,OAAO,SACPC,WAAS,EACTC,GAAG,MACHC,MAAM,MACNC,KAAK,MACLC,WAAS,EACTC,MAAOhB,KAAKN,MAAMC,OAClBsB,SAAU,SAACC,GAAY,EAAKC,SAAS,CAAExB,OAAQuB,EAAME,OAAOJ,WAEhE,kBAACK,EAAA,EAAD,CACIC,KAAK,SACLX,WAAS,EACTH,QAAQ,YACRe,MAAM,UACNlB,UAAWN,EAAQyB,OACnBC,QAAS,WAAQC,SAASC,SAASC,KAAO,EAAKlC,MAAMC,QACrDkC,UAAW7B,KAAK8B,SAAS9B,KAAKN,MAAMC,SAPxC,YAWA,kBAACoC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACT,kBAACC,EAAA,EAAD,CAAMP,KAAK,8CAA8CR,OAAO,SAASZ,QAAQ,SAAjF,yB,GAtDA4B,IAAMC,WAiEnBC,eA1FA,SAAAC,GAAK,MAAK,CACrB,UAAW,CACPC,KAAM,CACFC,gBAAiBF,EAAMG,QAAQC,OAAOC,QAG9CtC,MAAO,CACHuC,UAAWN,EAAMO,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEhBC,OAAQ,CACJxC,OAAQ6B,EAAMO,QAAQ,GACtBL,gBAAiBF,EAAMG,QAAQS,UAAUC,MAE7CC,KAAM,CACFC,MAAO,OACPT,UAAWN,EAAMO,QAAQ,IAE7BtB,OAAQ,CACJd,OAAQ6B,EAAMO,QAAQ,EAAG,EAAG,OAqErBR,CAAmB9C,GCzGnB+D,MARf,WACE,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,QCIcmD,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnC,SAASoC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.69dff73a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {'Copyright Â© '}\r\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n                Your Website\r\n      </Link>{' '}\r\n            {new Date().getFullYear()}\r\n            {'.'}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst styles = theme => ({\r\n    '@global': {\r\n        body: {\r\n            backgroundColor: theme.palette.common.white,\r\n        },\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n});\r\n\r\nclass MainComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            urlBox: \"https://\"\r\n        };\r\n    }\r\n    validURL(str) {\r\n        if(str === \"https://\"){return false;}\r\n        try {\r\n            new URL(str);\r\n            return true;\r\n        } catch (_) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline />\r\n                <div className={classes.paper}>\r\n                    {/* <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar> */}\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Enter URL to redirect to:\r\n                    </Typography>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        id=\"url\"\r\n                        label=\"URL\"\r\n                        name=\"url\"\r\n                        autoFocus\r\n                        value={this.state.urlBox}\r\n                        onChange={(event) => { this.setState({ urlBox: event.target.value }) }}\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={() => { document.location.href = this.state.urlBox }}\r\n                        disabled={!this.validURL(this.state.urlBox)}\r\n                    >\r\n                        Redirect\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link href=\"https://www.youtube.com/watch?v=ARQ6ll8yzBo\" target=\"_blank\" variant=\"body2\">\r\n                                What is this?\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(MainComponent)","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainComponent from './MainComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent />    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}